{"version":3,"sources":["components/Cell/Cell.js","components/Board/Board.js","components/ResultModal/ResultModal.js","utils/WinnerCalculator.js","components/Game/Game.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","props","cellClasses","classNames","cell","winner","canHighlight","cellContentClasses","cell-content","populated","value","react_default","a","createElement","className","onClick","Board","cells","cellValues","map","index","winningCombination","indexOf","Cell_Cell_Cell","key","cellClicked","id","ResultModal","resultModalClasses","modal-open","isGameOver","message","concat","onNewGameClicked","winningMatrix","0","1","2","3","4","5","6","7","8","Game","_useState","useState","_useState2","Object","slicedToArray","setCellValues","_useState3","_useState4","xIsNext","setXIsNext","_useState5","_useState6","setIsGameOver","_useState7","_useState8","noOfTurnsLeft","setNoOfTurnsLeft","_useState9","_useState10","setWinner","_useState11","_useState12","setWinningCombination","Board_Board_Board","cellIndex","newCellValues","toConsumableArray","newNoOfTurnsLeft","calcResult","winningRanges","i","length","currentValue","firstOption","secondOption","hasResult","undefined","calculateWinner","console","log","ResultModal_ResultModal_ResultModal","App","class","Game_Game_Game","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"8UAIaA,SAAO,SAACC,GACpB,IAAMC,EAAcC,IAAW,CAC9BC,MAAM,EACNC,OAAQJ,EAAMK,eAGTC,EAAqBJ,IAAW,CACrCK,gBAAgB,EAChBC,UAAWR,EAAMS,QAGlB,OACCC,EAAAC,EAAAC,cAAA,UAAQC,UAAWZ,EAAaa,QAASd,EAAMc,SAC9CJ,EAAAC,EAAAC,cAAA,QAAMC,UAAWP,GAAqBN,EAAMS,UCblCM,SAAQ,SAACf,GACrB,IAAMgB,EAAQhB,EAAMiB,WAAWC,IAAI,SAACT,EAAOU,GAC1C,IAAMd,EAAeL,EAAMoB,oBAAsBpB,EAAMoB,mBAAmBC,QAAQF,IAAU,EAC5F,OAAOT,EAAAC,EAAAC,cAACU,EAAD,CACNC,IAAKJ,EACLV,MAAOA,EACPJ,aAAcA,EACdS,QAAS,kBAAMd,EAAMwB,YAAYL,QAEnC,OACCT,EAAAC,EAAAC,cAAA,OAAKa,GAAG,SACNT,KCXSU,SAAc,SAAC1B,GAE3B,IAAM2B,EAAqBzB,IAAW,CACrC0B,aAAc5B,EAAM6B,aAEfC,EAAU9B,EAAMI,OAAN,aAAA2B,OAA4B/B,EAAMI,QAAlC,MAChB,OACCM,EAAAC,EAAAC,cAAA,OAAKa,GAAG,gBAAgBZ,UAAWc,GAClCjB,EAAAC,EAAAC,cAAA,OAAKa,GAAG,qBACPf,EAAAC,EAAAC,cAAA,OAAKa,GAAG,oBACPf,EAAAC,EAAAC,cAAA,OAAKa,GAAG,oBACPf,EAAAC,EAAAC,cAAA,YAAOkB,KAGTpB,EAAAC,EAAAC,cAAA,OAAKa,GAAG,sBACPf,EAAAC,EAAAC,cAAA,UAAQa,GAAG,kBAAkBX,QAASd,EAAMgC,kBAA5C,uBCnBCC,SAAgB,CAClBC,EAAG,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,IACxBC,EAAG,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,IAChBC,EAAG,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,IACxBC,EAAG,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,IAChBC,EAAG,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,IAChCC,EAAG,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,IAChBC,EAAG,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,IACxBC,EAAG,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,IAChBC,EAAG,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,MCHfC,EAAO,WAAM,IAAAC,EACWC,mBAAS,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KADrDC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAClB3B,EADkB6B,EAAA,GACNG,EADMH,EAAA,GAAAI,EAGKL,oBAAS,GAHdM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAGlBE,EAHkBD,EAAA,GAGTE,EAHSF,EAAA,GAAAG,EAIWT,oBAAS,GAJpBU,EAAAR,OAAAC,EAAA,EAAAD,CAAAO,EAAA,GAIlBzB,EAJkB0B,EAAA,GAINC,EAJMD,EAAA,GAAAE,EAKiBZ,mBAAS,GAL1Ba,EAAAX,OAAAC,EAAA,EAAAD,CAAAU,EAAA,GAKlBE,EALkBD,EAAA,GAKHE,EALGF,EAAA,GAAAG,EAMGhB,qBANHiB,EAAAf,OAAAC,EAAA,EAAAD,CAAAc,EAAA,GAMlBzD,EANkB0D,EAAA,GAMVC,EANUD,EAAA,GAAAE,EAO2BnB,mBAAS,IAPpCoB,EAAAlB,OAAAC,EAAA,EAAAD,CAAAiB,EAAA,GAOlB5C,EAPkB6C,EAAA,GAOEC,EAPFD,EAAA,GAkCzB,OACCvD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACdH,EAAAC,EAAAC,cAAA,OAAKa,GAAG,QACPf,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAACuD,EAAD,CACClD,WAAYA,EACZG,mBAAoBA,EACpBI,YAtBgB,SAAC4C,GACpB,GAX0D,KAAzBnD,EAWjBmD,GAAY,CAC3B,IAAMC,EAAatB,OAAAuB,EAAA,EAAAvB,CAAO9B,GAC1BoD,EAAcD,GAAahB,EAAU,IAAM,IAC3C,IAAMmB,EAAmBZ,EAAgB,EACnCa,EDjBsB,SAACvD,EAAY0C,EAAeS,GAIvD,IAFA,IAAMK,EAAgBxC,EAAcmC,GAE3BM,EAAI,EAAGA,EAAID,EAAcE,OAAQD,IAAK,CAC3C,IAAME,EAAe3D,EAAWmD,GAC1BS,EAAc5D,EAAWwD,EAAcC,GAAG,IAC1CI,EAAe7D,EAAWwD,EAAcC,GAAG,IACjD,GAAIE,IAAiBC,GAAeA,IAAgBC,EAChD,MAAO,CACHC,WAAW,EACX3E,OAAQwE,EACRxD,mBAAoB,CAACgD,EAAWK,EAAcC,GAAG,GAAID,EAAcC,GAAG,KAKlF,OAAsB,IAAlBf,EACO,CACHoB,WAAW,EACX3E,YAAQ4E,EACR5D,mBAAoB,IAIrB,CACH2D,WAAW,EACX3E,YAAQ4E,EACR5D,mBAAoB,ICXN6D,CAAgBZ,EAAeE,EAAkBH,GACpEnB,EAAcoB,GACda,QAAQC,IAAIZ,GACZlB,GAAYD,GACZI,EAAcgB,EAAWO,WACzBnB,EAAiBW,GACjBR,EAAUS,EAAWpE,QACrB8D,EAAsBM,EAAWpD,yBAajCV,EAAAC,EAAAC,cAACwE,EAAD,CAAavD,WAAYA,EAAYzB,OAAQA,EAAQ4B,iBAjCnC,WACnBiB,EAAc,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAC/CI,GAAW,GACXG,GAAc,GACdI,EAAiB,GACjBG,IACAG,EAAsB,SCQTmB,MA3Bf,WACC,OACC3E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,OAAK0E,MAAM,uBACV5E,EAAAC,EAAAC,cAAA,OAAK0E,MAAM,uBACV5E,EAAAC,EAAAC,cAAA,OAAK0E,MAAM,oBACX5E,EAAAC,EAAAC,cAAA,OAAK0E,MAAM,mBAEZ5E,EAAAC,EAAAC,cAAA,OAAK0E,MAAM,kBACV5E,EAAAC,EAAAC,cAAA,OAAK0E,MAAM,2BACX5E,EAAAC,EAAAC,cAAA,OAAK0E,MAAM,uBACX5E,EAAAC,EAAAC,cAAA,OAAK0E,MAAM,8BACX5E,EAAAC,EAAAC,cAAA,OAAK0E,MAAM,qBACX5E,EAAAC,EAAAC,cAAA,OAAK0E,MAAM,yBAEZ5E,EAAAC,EAAAC,cAAA,OAAK0E,MAAM,yBACV5E,EAAAC,EAAAC,cAAA,OAAK0E,MAAM,2BACX5E,EAAAC,EAAAC,cAAA,OAAK0E,MAAM,uBACX5E,EAAAC,EAAAC,cAAA,OAAK0E,MAAM,qBACX5E,EAAAC,EAAAC,cAAA,OAAK0E,MAAM,0BAGb5E,EAAAC,EAAAC,cAAC2E,EAAD,QCdYC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDDY,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH/F,EAAAC,EAAAC,cAACF,EAAAC,EAAM+F,WAAP,KACEhG,EAAAC,EAAAC,cAAC+F,EAAD,QAOJnB","file":"static/js/main.b0496fc4.chunk.js","sourcesContent":["import React from 'react';\r\nimport classNames from 'classnames';\r\nimport './Cell.css';\r\n\r\nexport const Cell = (props) => {\r\n\tconst cellClasses = classNames({\r\n\t\tcell: true,\r\n\t\twinner: props.canHighlight\r\n\t});\r\n\r\n\tconst cellContentClasses = classNames({\r\n\t\t'cell-content': true,\r\n\t\tpopulated: props.value\r\n\t});\r\n\r\n\treturn (\r\n\t\t<button className={cellClasses} onClick={props.onClick}>\r\n\t\t\t<span className={cellContentClasses}>{props.value}</span>\r\n\t\t</button>\r\n\t);\r\n}","import React from 'react';\r\nimport { Cell } from '../Cell/Cell';\r\nimport './Board.css';\r\n\r\nexport const Board = (props) => {\r\n\tconst cells = props.cellValues.map((value, index) => {\r\n\t\tconst canHighlight = props.winningCombination && props.winningCombination.indexOf(index) >= 0;\r\n\t\treturn <Cell\r\n\t\t\tkey={index}\r\n\t\t\tvalue={value}\r\n\t\t\tcanHighlight={canHighlight}\r\n\t\t\tonClick={() => props.cellClicked(index)} />;\r\n\t});\r\n\treturn (\r\n\t\t<div id=\"board\">\r\n\t\t\t{cells}\r\n\t\t</div>\r\n\t);\r\n}\r\n","import classNames from 'classnames';\r\nimport React from 'react';\r\nimport './ResultModal.css';\r\n\r\nexport const ResultModal = (props) => {\r\n\r\n\tconst resultModalClasses = classNames({\r\n\t\t'modal-open': props.isGameOver\r\n\t});\r\n\tconst message = props.winner ? `Winner is ${props.winner}` : `TIE`;\r\n\treturn (\r\n\t\t<div id=\"modal-overlay\" className={resultModalClasses}>\r\n\t\t\t<div id=\"game-result-modal\">\r\n\t\t\t\t<div id=\"result-container\">\r\n\t\t\t\t\t<div id=\"winner-container\">\r\n\t\t\t\t\t\t<span>{message}</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div id=\"new-game-container\">\r\n\t\t\t\t\t<button id=\"new-game-button\" onClick={props.onNewGameClicked}>Start New Game</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n","const winningMatrix = {\r\n    0: [[1, 2], [3, 6], [4, 8]],\r\n    1: [[0, 2], [4, 7]],\r\n    2: [[0, 1], [5, 8], [4, 6]],\r\n    3: [[0, 6], [4, 5]],\r\n    4: [[2, 6], [3, 5], [1, 7], [0, 8]],\r\n    5: [[3, 4], [2, 8]],\r\n    6: [[7, 8], [0, 3], [2, 4]],\r\n    7: [[6, 8], [1, 4]],\r\n    8: [[6, 7], [2, 5], [0, 4]]\r\n};\r\n\r\n\r\nexport const calculateWinner = (cellValues, noOfTurnsLeft, cellIndex) => {\r\n\r\n    const winningRanges = winningMatrix[cellIndex];\r\n\r\n    for (let i = 0; i < winningRanges.length; i++) {\r\n        const currentValue = cellValues[cellIndex];\r\n        const firstOption = cellValues[winningRanges[i][0]];\r\n        const secondOption = cellValues[winningRanges[i][1]];\r\n        if (currentValue === firstOption && firstOption === secondOption) {\r\n            return {\r\n                hasResult: true,\r\n                winner: currentValue,\r\n                winningCombination: [cellIndex, winningRanges[i][0], winningRanges[i][1]]\r\n            };\r\n        }\r\n    }\r\n\r\n    if (noOfTurnsLeft === 0) {\r\n        return {\r\n            hasResult: true,\r\n            winner: undefined,\r\n            winningCombination: []\r\n        };\r\n    }\r\n\r\n    return {\r\n        hasResult: false,\r\n        winner: undefined,\r\n        winningCombination: []\r\n    };\r\n};","import React, { useState } from 'react';\r\nimport { Board } from '../Board/Board';\r\nimport { ResultModal } from '../ResultModal/ResultModal';\r\nimport './Game.css';\r\nimport { calculateWinner } from '../../utils/WinnerCalculator';\r\n\r\nexport const Game = () => {\r\n\tconst [cellValues, setCellValues] = useState(['', '', '', '', '', '', '', '', '']);\r\n\t// const winningCombination = [];\r\n\tconst [xIsNext, setXIsNext] = useState(true);\r\n\tconst [isGameOver, setIsGameOver] = useState(false);\r\n\tconst [noOfTurnsLeft, setNoOfTurnsLeft] = useState(9);\r\n\tconst [winner, setWinner] = useState();\r\n\tconst [winningCombination, setWinningCombination] = useState([]);\r\n\r\n\tconst isCellEmpty = (celIndex) => cellValues[celIndex] === '';\r\n\r\n\tconst restartGame = () => {\r\n\t\tsetCellValues(['', '', '', '', '', '', '', '', '']);\r\n\t\tsetXIsNext(true);\r\n\t\tsetIsGameOver(false);\r\n\t\tsetNoOfTurnsLeft(9);\r\n\t\tsetWinner();\r\n\t\tsetWinningCombination([]);\r\n\t}\r\n\tconst cellClicked = (cellIndex) => {\r\n\t\tif (isCellEmpty(cellIndex)) {\r\n\t\t\tconst newCellValues = [...cellValues];\r\n\t\t\tnewCellValues[cellIndex] = xIsNext ? 'X' : 'O';\r\n\t\t\tconst newNoOfTurnsLeft = noOfTurnsLeft - 1;\r\n\t\t\tconst calcResult = calculateWinner(newCellValues, newNoOfTurnsLeft, cellIndex);\r\n\t\t\tsetCellValues(newCellValues);\r\n\t\t\tconsole.log(newNoOfTurnsLeft);\r\n\t\t\tsetXIsNext(!xIsNext);\r\n\t\t\tsetIsGameOver(calcResult.hasResult);\r\n\t\t\tsetNoOfTurnsLeft(newNoOfTurnsLeft);\r\n\t\t\tsetWinner(calcResult.winner);\r\n\t\t\tsetWinningCombination(calcResult.winningCombination);\r\n\t\t}\r\n\t}\r\n\treturn (\r\n\t\t<div className=\"Game\">\r\n\t\t\t<div id=\"game\">\r\n\t\t\t\t<h1>Tic Tac Toe</h1>\r\n\t\t\t\t<Board\r\n\t\t\t\t\tcellValues={cellValues}\r\n\t\t\t\t\twinningCombination={winningCombination}\r\n\t\t\t\t\tcellClicked={cellClicked} />\r\n\t\t\t</div>\r\n\r\n\t\t\t<ResultModal isGameOver={isGameOver} winner={winner} onNewGameClicked={restartGame} />\r\n\t\t</div>\r\n\r\n\t);\r\n}\r\n\r\n// export default App;\r\n","import React from 'react';\nimport './App.css';\nimport { Game } from './components/Game/Game';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div class=\"animation-container\">\n\t\t\t\t<div class=\"lightning-container\">\n\t\t\t\t\t<div class=\"lightning white\"></div>\n\t\t\t\t\t<div class=\"lightning red\"></div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"boom-container\">\n\t\t\t\t\t<div class=\"shape circle big white\"></div>\n\t\t\t\t\t<div class=\"shape circle white\"></div>\n\t\t\t\t\t<div class=\"shape triangle big yellow\"></div>\n\t\t\t\t\t<div class=\"shape disc white\"></div>\n\t\t\t\t\t<div class=\"shape triangle blue\"></div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"boom-container second\">\n\t\t\t\t\t<div class=\"shape circle big white\"></div>\n\t\t\t\t\t<div class=\"shape circle white\"></div>\n\t\t\t\t\t<div class=\"shape disc white\"></div>\n\t\t\t\t\t<div class=\"shape triangle blue\"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<Game />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}